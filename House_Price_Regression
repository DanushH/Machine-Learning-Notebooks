{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":5407,"databundleVersionId":868283,"sourceType":"competition"}],"dockerImageVersionId":30732,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/danuherath/houseprices-regression?scriptVersionId=183690308\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"markdown","source":"# House Prices - Regression\n\n---\n\n<br>\n\n## Problem Definition\n\n- Dataset\n    \n    [House Prices - Advanced Regression Techniques](https://www.kaggle.com/competitions/house-prices-advanced-regression-techniques/data) dataset by Kaggle. The dataset contains detailed information about houses in Ames, Iowa. The dataset includes 79 explanatory variables describing nearly every aspect of residential homes in Ames, Iowa.\n\n<br>\n\n- Objective\n    \n    The goal of this project is to develop a predictive model with higher accuracy for estimating the sale prices of houses based on the features of the above dataset.\n\n\n<br>\n\n- Following regression algorithms will be used on the dataset\n\n    1. [Linear Regression](https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LinearRegression.html)\n    2. [Decision Tree Regressor](https://scikit-learn.org/stable/modules/generated/sklearn.tree.DecisionTreeRegressor.html#sklearn.tree.DecisionTreeRegressor)\n    3. [Random Forest Regressor](https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestRegressor.html)\n    4. [Gradient Boosting Regreesor](https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.GradientBoostingRegressor.html#sklearn.ensemble.GradientBoostingRegressor)\n    5. [Support Vector Regressor (SVR)](https://scikit-learn.org/stable/modules/generated/sklearn.svm.SVR.html#sklearn.svm.SVR) \n    6. [K-Nearest Neighbors (KNN Regressor)](https://scikit-learn.org/stable/modules/generated/sklearn.neighbors.KNeighborsRegressor.html)\n    7. [Neural Network](https://scikit-learn.org/stable/modules/generated/sklearn.neural_network.MLPRegressor.html)\n\n<br>\n","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import StandardScaler, OneHotEncoder\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\n\nfrom sklearn.model_selection import train_test_split, cross_val_score\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor\nfrom sklearn.svm import SVR\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.neural_network import MLPRegressor\n\nfrom sklearn.metrics import mean_squared_error\n","metadata":{"execution":{"iopub.status.busy":"2024-06-15T15:32:25.727719Z","iopub.execute_input":"2024-06-15T15:32:25.728116Z","iopub.status.idle":"2024-06-15T15:32:29.835544Z","shell.execute_reply.started":"2024-06-15T15:32:25.728083Z","shell.execute_reply":"2024-06-15T15:32:29.834055Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import warnings\nwarnings.filterwarnings('ignore')\n","metadata":{"execution":{"iopub.status.busy":"2024-06-15T15:32:29.838308Z","iopub.execute_input":"2024-06-15T15:32:29.839357Z","iopub.status.idle":"2024-06-15T15:32:29.845705Z","shell.execute_reply.started":"2024-06-15T15:32:29.839309Z","shell.execute_reply":"2024-06-15T15:32:29.843986Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"\n<br>\n\n---\n\n# Step 1: Data Ingestion\n\n---\n\n<br>","metadata":{}},{"cell_type":"code","source":"train_data = pd.read_csv('/kaggle/input/house-prices-advanced-regression-techniques/train.csv')\ntest_data = pd.read_csv('/kaggle/input/house-prices-advanced-regression-techniques/test.csv')\n","metadata":{"execution":{"iopub.status.busy":"2024-06-15T15:32:29.847293Z","iopub.execute_input":"2024-06-15T15:32:29.848048Z","iopub.status.idle":"2024-06-15T15:32:29.974089Z","shell.execute_reply.started":"2024-06-15T15:32:29.848001Z","shell.execute_reply":"2024-06-15T15:32:29.972685Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train_data.head()\n# test_data.head()\n","metadata":{"execution":{"iopub.status.busy":"2024-06-15T15:32:29.976722Z","iopub.execute_input":"2024-06-15T15:32:29.977104Z","iopub.status.idle":"2024-06-15T15:32:30.026123Z","shell.execute_reply.started":"2024-06-15T15:32:29.97707Z","shell.execute_reply":"2024-06-15T15:32:30.024697Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"\n<br>\n\n---\n\n# Step 2: Exploratory Data Analysis (EDA)\n\n---\n\n<br>\n","metadata":{}},{"cell_type":"markdown","source":"\n### 2.1 Descriptive statistics\n","metadata":{}},{"cell_type":"code","source":"# train_data.info\ntrain_data.describe()\n","metadata":{"execution":{"iopub.status.busy":"2024-06-15T15:32:30.02819Z","iopub.execute_input":"2024-06-15T15:32:30.028719Z","iopub.status.idle":"2024-06-15T15:32:30.173569Z","shell.execute_reply.started":"2024-06-15T15:32:30.028682Z","shell.execute_reply":"2024-06-15T15:32:30.172307Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# test_data.info\ntest_data.describe()\n","metadata":{"execution":{"iopub.status.busy":"2024-06-15T15:32:30.174992Z","iopub.execute_input":"2024-06-15T15:32:30.175388Z","iopub.status.idle":"2024-06-15T15:32:30.284446Z","shell.execute_reply.started":"2024-06-15T15:32:30.175355Z","shell.execute_reply":"2024-06-15T15:32:30.28338Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"\n### 2.2 Data Cleaning\n","metadata":{}},{"cell_type":"code","source":"missing_values = train_data.isnull().sum().sort_values(ascending=False)\nmissing_values = missing_values[missing_values > 0]\nmissing_values\n","metadata":{"execution":{"iopub.status.busy":"2024-06-15T15:32:30.285533Z","iopub.execute_input":"2024-06-15T15:32:30.285869Z","iopub.status.idle":"2024-06-15T15:32:30.308056Z","shell.execute_reply.started":"2024-06-15T15:32:30.28584Z","shell.execute_reply":"2024-06-15T15:32:30.306491Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Columns with more than 50% missing values\nmissing_columns = missing_values[missing_values > len(train_data)/2].index\nmissing_columns\n","metadata":{"execution":{"iopub.status.busy":"2024-06-15T15:32:30.309872Z","iopub.execute_input":"2024-06-15T15:32:30.31027Z","iopub.status.idle":"2024-06-15T15:32:30.319331Z","shell.execute_reply.started":"2024-06-15T15:32:30.310237Z","shell.execute_reply":"2024-06-15T15:32:30.318019Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train_data = train_data.drop(columns=missing_columns)\ntest_data = test_data.drop(columns=missing_columns)\n","metadata":{"execution":{"iopub.status.busy":"2024-06-15T15:32:30.320691Z","iopub.execute_input":"2024-06-15T15:32:30.321028Z","iopub.status.idle":"2024-06-15T15:32:30.336104Z","shell.execute_reply.started":"2024-06-15T15:32:30.320999Z","shell.execute_reply":"2024-06-15T15:32:30.334775Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train_data.dtypes\n","metadata":{"execution":{"iopub.status.busy":"2024-06-15T15:32:30.341081Z","iopub.execute_input":"2024-06-15T15:32:30.341851Z","iopub.status.idle":"2024-06-15T15:32:30.352238Z","shell.execute_reply.started":"2024-06-15T15:32:30.341814Z","shell.execute_reply":"2024-06-15T15:32:30.35099Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Filling missing values for numerical columns with median\nnum_cols = train_data.select_dtypes(include=np.number).columns\nimputer = SimpleImputer(strategy='median')\ntrain_data[num_cols] = imputer.fit_transform(train_data[num_cols])\n\n# Filling missing values for categorical columns with mode\ncat_cols = train_data.select_dtypes(include=[object]).columns\nimputer = SimpleImputer(strategy='most_frequent')\ntrain_data[cat_cols] = imputer.fit_transform(train_data[cat_cols])\n","metadata":{"execution":{"iopub.status.busy":"2024-06-15T15:32:30.353936Z","iopub.execute_input":"2024-06-15T15:32:30.354352Z","iopub.status.idle":"2024-06-15T15:32:30.411587Z","shell.execute_reply.started":"2024-06-15T15:32:30.354318Z","shell.execute_reply":"2024-06-15T15:32:30.409939Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Test data\n# Filling missing values for numerical columns with median\nnum_cols = test_data.select_dtypes(include=np.number).columns\nimputer = SimpleImputer(strategy='median')\ntest_data[num_cols] = imputer.fit_transform(test_data[num_cols])\n\n# Filling missing values for categorical columns with mode\ncat_cols = test_data.select_dtypes(include=[object]).columns\nimputer = SimpleImputer(strategy='most_frequent')\ntest_data[cat_cols] = imputer.fit_transform(test_data[cat_cols])\n","metadata":{"execution":{"iopub.status.busy":"2024-06-15T15:32:30.413742Z","iopub.execute_input":"2024-06-15T15:32:30.414623Z","iopub.status.idle":"2024-06-15T15:32:30.470557Z","shell.execute_reply.started":"2024-06-15T15:32:30.414576Z","shell.execute_reply":"2024-06-15T15:32:30.469662Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train_data.isnull().sum().sum()\n","metadata":{"execution":{"iopub.status.busy":"2024-06-15T15:32:30.472263Z","iopub.execute_input":"2024-06-15T15:32:30.473094Z","iopub.status.idle":"2024-06-15T15:32:30.497347Z","shell.execute_reply.started":"2024-06-15T15:32:30.473051Z","shell.execute_reply":"2024-06-15T15:32:30.495985Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"test_data.isnull().sum().sum()","metadata":{"execution":{"iopub.status.busy":"2024-06-15T15:32:30.499149Z","iopub.execute_input":"2024-06-15T15:32:30.499631Z","iopub.status.idle":"2024-06-15T15:32:30.523746Z","shell.execute_reply.started":"2024-06-15T15:32:30.499587Z","shell.execute_reply":"2024-06-15T15:32:30.522187Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"\n### 2.3 Data Visualization\n","metadata":{}},{"cell_type":"code","source":"# Plotting the distribution of 'SalePrice'\nplt.figure(figsize=(10, 6))\nsns.histplot(train_data['SalePrice'], kde=True)\nplt.title('Distribution of SalePrice')\nplt.xlabel('SalePrice')\nplt.ylabel('Frequency')\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-06-15T15:32:30.52566Z","iopub.execute_input":"2024-06-15T15:32:30.526427Z","iopub.status.idle":"2024-06-15T15:32:31.214161Z","shell.execute_reply.started":"2024-06-15T15:32:30.526391Z","shell.execute_reply":"2024-06-15T15:32:31.212769Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Plotting correlation heatmap\ncorr_matrix = train_data[num_cols].corr()\n\nplt.figure(figsize=(25, 20))\nsns.heatmap(corr_matrix, annot=True, fmt='.2f', cmap='coolwarm')\nplt.title('Correlation Matrix')\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-06-15T15:32:31.215852Z","iopub.execute_input":"2024-06-15T15:32:31.216338Z","iopub.status.idle":"2024-06-15T15:32:35.424541Z","shell.execute_reply.started":"2024-06-15T15:32:31.216294Z","shell.execute_reply":"2024-06-15T15:32:35.423233Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"\n<br>\n\n---\n\n## Step 3. Feature Engineering\n\n---\n\n<br>\n","metadata":{}},{"cell_type":"code","source":"# Dropping less relevant columns\ntrain_data = train_data.drop(columns=['Id'])\ntest_data = test_data.drop(columns=['Id'])\n","metadata":{"execution":{"iopub.status.busy":"2024-06-15T15:32:35.426015Z","iopub.execute_input":"2024-06-15T15:32:35.426434Z","iopub.status.idle":"2024-06-15T15:32:35.444362Z","shell.execute_reply.started":"2024-06-15T15:32:35.426398Z","shell.execute_reply":"2024-06-15T15:32:35.442837Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Splitting data into features and target variable\nX = train_data.drop(columns=['SalePrice'])\ny = train_data['SalePrice']\n","metadata":{"execution":{"iopub.status.busy":"2024-06-15T15:32:35.446437Z","iopub.execute_input":"2024-06-15T15:32:35.446901Z","iopub.status.idle":"2024-06-15T15:32:35.461161Z","shell.execute_reply.started":"2024-06-15T15:32:35.446858Z","shell.execute_reply":"2024-06-15T15:32:35.459514Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"\n<br>\n\n---\n\n## Step 4. Data Pre-processing\n\n---\n\n<br>\n","metadata":{}},{"cell_type":"code","source":"num_features = X.select_dtypes(include=np.number).columns\ncat_features = X.select_dtypes(include=object).columns\n","metadata":{"execution":{"iopub.status.busy":"2024-06-15T15:32:35.463137Z","iopub.execute_input":"2024-06-15T15:32:35.463684Z","iopub.status.idle":"2024-06-15T15:32:35.477049Z","shell.execute_reply.started":"2024-06-15T15:32:35.46364Z","shell.execute_reply":"2024-06-15T15:32:35.475564Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Preprocessing pipelines for numerical and categorical features\nnum_pipeline = Pipeline([\n    ('scaler', StandardScaler())\n])\n\ncat_pipeline = Pipeline([\n    ('onehot', OneHotEncoder(handle_unknown='ignore'))\n])\n\npreprocessor = ColumnTransformer([\n    ('num', num_pipeline, num_features),\n    ('cat', cat_pipeline, cat_features)\n])\n","metadata":{"execution":{"iopub.status.busy":"2024-06-15T15:32:35.478752Z","iopub.execute_input":"2024-06-15T15:32:35.479132Z","iopub.status.idle":"2024-06-15T15:32:35.48664Z","shell.execute_reply.started":"2024-06-15T15:32:35.479098Z","shell.execute_reply":"2024-06-15T15:32:35.48545Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":" \n <br>\n \n ---\n \n # Step 5. Model Training & Evaluation\n \n ---\n \n <br>\n ","metadata":{}},{"cell_type":"code","source":"models = {\n    'Linear Regression': LinearRegression(),\n    'Decision Tree Regressor': DecisionTreeRegressor(random_state=42),\n    'Random Forest Regressor': RandomForestRegressor(random_state=42),\n    'Gradient Boosting Regressor': GradientBoostingRegressor(random_state=42),\n    'Support Vector Regressor (SVR)': SVR(),\n    'K-Nearest Neighbors (KNN)': KNeighborsRegressor(),\n    'Neural Network': MLPRegressor(random_state=42, max_iter=1000)\n}\n","metadata":{"execution":{"iopub.status.busy":"2024-06-15T15:32:35.488089Z","iopub.execute_input":"2024-06-15T15:32:35.488526Z","iopub.status.idle":"2024-06-15T15:32:35.502713Z","shell.execute_reply.started":"2024-06-15T15:32:35.488495Z","shell.execute_reply":"2024-06-15T15:32:35.500271Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def train_and_evaluate_models(X, y):\n    results = {}\n    best_model = None\n    best_rmse = float('inf')\n    \n    # Splitting data into training and validation sets\n    X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=42)\n\n    for name, model in models.items():\n        pipeline = Pipeline([\n            ('preprocessor', preprocessor),\n            ('regressor', model)\n        ])\n        \n        pipeline.fit(X_train, y_train)\n        y_val_pred = pipeline.predict(X_val)\n\n        # Evaluate using RMSE of the log of the predictions and the true values\n        rmse = np.sqrt(mean_squared_error(np.log1p(y_val), np.log1p(y_val_pred)))\n        results[name] = rmse\n        print(f\"{name}: RMSE (log-transformed): {rmse}\")\n\n        if rmse < best_rmse:\n            best_rmse = rmse\n            best_model_name = name\n\n    best_model = models[best_model_name]\n    print(f\"Best model: {best_model_name} with RMSE: {best_rmse}\")\n    \n    return best_model\n\n\nbest_model = train_and_evaluate_models(X, y)\n","metadata":{"execution":{"iopub.status.busy":"2024-06-15T15:32:35.504487Z","iopub.execute_input":"2024-06-15T15:32:35.505011Z","iopub.status.idle":"2024-06-15T15:33:31.708655Z","shell.execute_reply.started":"2024-06-15T15:32:35.504965Z","shell.execute_reply":"2024-06-15T15:33:31.706632Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":" \n <br>\n \n ---\n \n # Step 6. Make Predictions on Test Data\n \n ---\n \n <br>\n ","metadata":{}},{"cell_type":"code","source":"def make_predictions(best_model, test_data):\n    \n    pipeline = Pipeline([\n        ('preprocessor', preprocessor),\n        ('regressor', best_model)\n    ])\n        \n    test_predictions = pipeline.predict(test_data)\n    \n    return test_predictions\n\n\ntest_predictions = make_predictions(best_model, test_data)\n","metadata":{"execution":{"iopub.status.busy":"2024-06-15T15:33:31.710826Z","iopub.execute_input":"2024-06-15T15:33:31.712012Z","iopub.status.idle":"2024-06-15T15:33:31.823847Z","shell.execute_reply.started":"2024-06-15T15:33:31.711949Z","shell.execute_reply":"2024-06-15T15:33:31.822943Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"sample_submission = pd.read_csv('/kaggle/input/house-prices-advanced-regression-techniques/sample_submission.csv')\n\nsubmission = pd.DataFrame({\n        'Id': sample_submission['Id'],\n        'SalePrice': test_predictions\n})\nsubmission.to_csv('submission.csv', index=False)\n","metadata":{"execution":{"iopub.status.busy":"2024-06-15T15:33:31.824961Z","iopub.execute_input":"2024-06-15T15:33:31.825632Z","iopub.status.idle":"2024-06-15T15:33:31.850625Z","shell.execute_reply.started":"2024-06-15T15:33:31.825599Z","shell.execute_reply":"2024-06-15T15:33:31.84923Z"},"trusted":true},"execution_count":null,"outputs":[]}]}