{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":76727,"databundleVersionId":9045607,"sourceType":"competition"}],"dockerImageVersionId":30746,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"<h1 align=\"center\"> Prediction of Poisonous Mushrooms (Binary Classification)</h1>\n\n<img \n    src=\"https://www.kaggle.com/competitions/76727/images/header\" \n    alt=\"\" \n    width=\"300\" \n    height=\"200\" \n    style=\"display: block; margin: 0 auto; border-radius:15px\" \n/>\n\n---\n\n## Problem Definition\n\n- Domain\n\n    - Biology\n\n<br>\n\n- Dataset\n\n    - [Binary Prediction of Poisonous Mushrooms](https://www.kaggle.com/competitions/playground-series-s4e8/data) dataset from Kaggle which contains 19 features explaining mushrooms' physical characteristics. Train dataset contains 3,116,945 samples and each instance represents one mushroom.\n\n<br>\n\n- Objective\n\n    - The goal of this project is to predict whether a mushroom is edible or poisonous based on its physical characteristics.\n\n<br>\n\n- Algorithms\n\n    - Following classification algorithms are used to train models on the train dataset. The models are evaluated using the Matthews correlation coefficient (MCC).\n    \n        1. [XGBoost (Extreme Gradient Boosting)](https://xgboost.readthedocs.io/en/stable/python/python_api.html#xgboost.XGBClassifier)\n        2. [LightGBM Classifier](https://lightgbm.readthedocs.io/en/latest/pythonapi/lightgbm.LGBMClassifier.html)\n        3. [CatBoost Classifier](https://catboost.ai/en/docs/concepts/python-reference_catboostclassifier)\n\n\n<br>\n","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%config InlineBackend.figure_format='svg'\n\nfrom sklearn.preprocessing import RobustScaler, OneHotEncoder, LabelEncoder\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline, make_pipeline\nfrom sklearn.impute import SimpleImputer\n\nfrom sklearn.model_selection import train_test_split\n\nfrom xgboost import XGBClassifier\nfrom lightgbm import LGBMClassifier\nfrom catboost import CatBoostClassifier\n\nfrom sklearn.metrics import matthews_corrcoef\n\nimport optuna","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-09-01T06:21:55.629313Z","iopub.execute_input":"2024-09-01T06:21:55.629744Z","iopub.status.idle":"2024-09-01T06:21:58.850346Z","shell.execute_reply.started":"2024-09-01T06:21:55.629708Z","shell.execute_reply":"2024-09-01T06:21:58.849105Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train_data_original = pd.read_csv('/kaggle/input/playground-series-s4e8/train.csv')\ntest_data_original = pd.read_csv('/kaggle/input/playground-series-s4e8/test.csv')\ntrain_data = train_data_original.copy()\ntest_data = test_data_original.copy()\n","metadata":{"execution":{"iopub.status.busy":"2024-09-01T06:21:58.852735Z","iopub.execute_input":"2024-09-01T06:21:58.853445Z","iopub.status.idle":"2024-09-01T06:22:17.624179Z","shell.execute_reply.started":"2024-09-01T06:21:58.853399Z","shell.execute_reply":"2024-09-01T06:22:17.623025Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train_data.columns\n","metadata":{"execution":{"iopub.status.busy":"2024-09-01T06:22:17.626049Z","iopub.execute_input":"2024-09-01T06:22:17.626483Z","iopub.status.idle":"2024-09-01T06:22:17.637820Z","shell.execute_reply.started":"2024-09-01T06:22:17.626445Z","shell.execute_reply":"2024-09-01T06:22:17.636671Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"test_data.columns","metadata":{"execution":{"iopub.status.busy":"2024-09-01T06:22:17.640156Z","iopub.execute_input":"2024-09-01T06:22:17.640494Z","iopub.status.idle":"2024-09-01T06:22:17.648669Z","shell.execute_reply.started":"2024-09-01T06:22:17.640464Z","shell.execute_reply":"2024-09-01T06:22:17.647409Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train_data.drop(columns=['id'], inplace=True)\ntest_data.drop(columns=['id'], inplace=True)\n","metadata":{"execution":{"iopub.status.busy":"2024-09-01T06:22:17.650383Z","iopub.execute_input":"2024-09-01T06:22:17.650860Z","iopub.status.idle":"2024-09-01T06:22:19.275683Z","shell.execute_reply.started":"2024-09-01T06:22:17.650820Z","shell.execute_reply":"2024-09-01T06:22:19.274447Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"---\n# Step 1: Exploratory Data Analysis (EDA)\n---","metadata":{}},{"cell_type":"code","source":"print(f\"Train Data\\nInstance Count: {train_data.shape[0]} \\nFeature Count: {train_data.shape[1]-1}\")\n\ntrain_data.head().style.set_table_attributes(\n    'style=\"overflow-x: auto; display: inline-block;\"'\n    ).set_properties(**{'min-width': '50px'})","metadata":{"execution":{"iopub.status.busy":"2024-09-01T06:22:19.277245Z","iopub.execute_input":"2024-09-01T06:22:19.277590Z","iopub.status.idle":"2024-09-01T06:22:19.345681Z","shell.execute_reply.started":"2024-09-01T06:22:19.277562Z","shell.execute_reply":"2024-09-01T06:22:19.344428Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(f\"Test Data\\nInstance Count: {test_data.shape[0]} \\nFeature Count: {test_data.shape[1]-1}\")\n\ntest_data.head().style.set_table_attributes(\n    'style=\"overflow-x: auto; display: inline-block;\"'\n    ).set_properties(**{'min-width': '50px'})","metadata":{"execution":{"iopub.status.busy":"2024-09-01T06:22:19.347241Z","iopub.execute_input":"2024-09-01T06:22:19.347558Z","iopub.status.idle":"2024-09-01T06:22:19.370930Z","shell.execute_reply.started":"2024-09-01T06:22:19.347533Z","shell.execute_reply":"2024-09-01T06:22:19.369699Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train_data.info()\n","metadata":{"execution":{"iopub.status.busy":"2024-09-01T06:22:19.372482Z","iopub.execute_input":"2024-09-01T06:22:19.372783Z","iopub.status.idle":"2024-09-01T06:22:19.397114Z","shell.execute_reply.started":"2024-09-01T06:22:19.372756Z","shell.execute_reply":"2024-09-01T06:22:19.395573Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"missing_values = train_data.isnull().sum().sort_values(ascending=False)\nmissing_values = missing_values[missing_values > 0]\nprint(missing_values)  \n","metadata":{"execution":{"iopub.status.busy":"2024-09-01T06:22:19.398460Z","iopub.execute_input":"2024-09-01T06:22:19.398771Z","iopub.status.idle":"2024-09-01T06:22:21.773206Z","shell.execute_reply.started":"2024-09-01T06:22:19.398745Z","shell.execute_reply":"2024-09-01T06:22:21.771890Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"missing_values = test_data.isnull().sum().sort_values(ascending=False)\nmissing_values = missing_values[missing_values > 0]\nprint(missing_values)  \n","metadata":{"execution":{"iopub.status.busy":"2024-09-01T06:22:21.776831Z","iopub.execute_input":"2024-09-01T06:22:21.777188Z","iopub.status.idle":"2024-09-01T06:22:23.260660Z","shell.execute_reply.started":"2024-09-01T06:22:21.777160Z","shell.execute_reply":"2024-09-01T06:22:23.259341Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"duplicates = train_data[train_data.duplicated(keep=False)]\nprint(len(duplicates))\n","metadata":{"execution":{"iopub.status.busy":"2024-09-01T06:22:23.262059Z","iopub.execute_input":"2024-09-01T06:22:23.262383Z","iopub.status.idle":"2024-09-01T06:22:28.517818Z","shell.execute_reply.started":"2024-09-01T06:22:23.262356Z","shell.execute_reply":"2024-09-01T06:22:28.516380Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train_data.nunique().sort_values(ascending=False)\n","metadata":{"execution":{"iopub.status.busy":"2024-09-01T06:22:28.519356Z","iopub.execute_input":"2024-09-01T06:22:28.519709Z","iopub.status.idle":"2024-09-01T06:22:29.975606Z","shell.execute_reply.started":"2024-09-01T06:22:28.519679Z","shell.execute_reply":"2024-09-01T06:22:29.974116Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"cat_features = train_data.select_dtypes(include=['object']).columns.tolist()\nnum_features = train_data.select_dtypes(include=[np.number]).columns.tolist()\n\nprint(f\"Categorical columns:\\n{cat_features}\")\nprint(f\"\\nNumerical columns:\\n{num_features}\")\n","metadata":{"execution":{"iopub.status.busy":"2024-09-01T06:22:29.977650Z","iopub.execute_input":"2024-09-01T06:22:29.978052Z","iopub.status.idle":"2024-09-01T06:22:30.767503Z","shell.execute_reply.started":"2024-09-01T06:22:29.978005Z","shell.execute_reply":"2024-09-01T06:22:30.766230Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"cat_features.remove('class')","metadata":{"execution":{"iopub.status.busy":"2024-09-01T06:22:30.769012Z","iopub.execute_input":"2024-09-01T06:22:30.769391Z","iopub.status.idle":"2024-09-01T06:22:30.774482Z","shell.execute_reply.started":"2024-09-01T06:22:30.769361Z","shell.execute_reply":"2024-09-01T06:22:30.773261Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"for col in cat_features:\n    print(col)\n    print(dict(train_data[col].value_counts()))\n    print()\n","metadata":{"execution":{"iopub.status.busy":"2024-09-01T06:22:30.776181Z","iopub.execute_input":"2024-09-01T06:22:30.776647Z","iopub.status.idle":"2024-09-01T06:22:33.109291Z","shell.execute_reply.started":"2024-09-01T06:22:30.776604Z","shell.execute_reply":"2024-09-01T06:22:33.108222Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"for col in cat_features:\n    print(col)\n    print(dict(test_data[col].value_counts()))\n    print()\n","metadata":{"execution":{"iopub.status.busy":"2024-09-01T06:22:33.110503Z","iopub.execute_input":"2024-09-01T06:22:33.110814Z","iopub.status.idle":"2024-09-01T06:22:34.681312Z","shell.execute_reply.started":"2024-09-01T06:22:33.110786Z","shell.execute_reply":"2024-09-01T06:22:34.680063Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"target_counts = train_data['class'].value_counts()\ntarget_counts\n","metadata":{"execution":{"iopub.status.busy":"2024-09-01T06:22:34.683125Z","iopub.execute_input":"2024-09-01T06:22:34.683578Z","iopub.status.idle":"2024-09-01T06:22:34.850271Z","shell.execute_reply.started":"2024-09-01T06:22:34.683535Z","shell.execute_reply":"2024-09-01T06:22:34.848990Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"---\n## 1.1 Statistical Analysis\n---","metadata":{}},{"cell_type":"code","source":"train_data[num_features].describe().style.set_table_attributes(\n    'style=\"overflow-x: auto; display: inline-block;\"').set_properties(**{'min-width': '100px'})\n","metadata":{"execution":{"iopub.status.busy":"2024-09-01T06:22:34.851908Z","iopub.execute_input":"2024-09-01T06:22:34.852405Z","iopub.status.idle":"2024-09-01T06:22:35.367486Z","shell.execute_reply.started":"2024-09-01T06:22:34.852368Z","shell.execute_reply":"2024-09-01T06:22:35.366411Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"Q1 = train_data[num_features].quantile(0.25)\nQ3 = train_data[num_features].quantile(0.75)\nIQR = Q3 - Q1\n\nlower_bound = Q1 - 1.5 * IQR\nupper_bound = Q3 + 1.5 * IQR\n\noutliers_iqr = ((train_data[num_features] < lower_bound) | (train_data[num_features] > upper_bound))\n\noutliers_count = outliers_iqr.sum()\noutliers_count = outliers_count[outliers_count > 0].sort_values(ascending=False)\nprint(f\"Outliers Count: \\n{outliers_count}\")\n","metadata":{"execution":{"iopub.status.busy":"2024-09-01T06:22:35.368846Z","iopub.execute_input":"2024-09-01T06:22:35.369239Z","iopub.status.idle":"2024-09-01T06:22:35.830475Z","shell.execute_reply.started":"2024-09-01T06:22:35.369210Z","shell.execute_reply":"2024-09-01T06:22:35.828999Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"---\n## 1.2 Data Visualization\n---","metadata":{}},{"cell_type":"markdown","source":"### 1.2.1 Univariate Analysis¶\n---","metadata":{}},{"cell_type":"code","source":"target_counts = train_data['class'].value_counts()\n\nplt.figure(figsize=(6,4))\nsns.barplot(x=target_counts.index, y=target_counts.values, palette='crest')\nplt.ylabel('Count')\n\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-09-01T06:22:35.832193Z","iopub.execute_input":"2024-09-01T06:22:35.832523Z","iopub.status.idle":"2024-09-01T06:22:36.227915Z","shell.execute_reply.started":"2024-09-01T06:22:35.832489Z","shell.execute_reply":"2024-09-01T06:22:36.226405Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"len(cat_features)","metadata":{"execution":{"iopub.status.busy":"2024-09-01T06:22:36.229943Z","iopub.execute_input":"2024-09-01T06:22:36.230417Z","iopub.status.idle":"2024-09-01T06:22:36.238003Z","shell.execute_reply.started":"2024-09-01T06:22:36.230379Z","shell.execute_reply":"2024-09-01T06:22:36.236965Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"n_rows = 6\nn_cols = 3\n\nfig, axes = plt.subplots(n_rows, n_cols, figsize=(20, 5*n_rows))\naxes = axes.flatten()\n\nfor i, column in enumerate(train_data[cat_features].columns):\n    ax = axes[i]\n    category_counts = train_data[cat_features][column].value_counts()\n    sns.barplot(x=category_counts.index, y=category_counts.values, ax=ax, palette='crest')\n    \nplt.suptitle('Bar Charts - Insurance Cross Selling Features')\nplt.savefig(\"Categorical feature analysis.svg\")\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-09-01T06:22:36.239544Z","iopub.execute_input":"2024-09-01T06:22:36.239971Z","iopub.status.idle":"2024-09-01T06:23:06.780103Z","shell.execute_reply.started":"2024-09-01T06:22:36.239920Z","shell.execute_reply":"2024-09-01T06:23:06.778795Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import warnings\nwarnings.simplefilter(action='ignore', category=FutureWarning)\n\nn_cols = 1\nn_rows = 3\n\nfig, axes = plt.subplots(n_rows, n_cols, figsize=(15, 5*n_rows))\naxes = axes.flatten()\n\nfor i, col in enumerate(train_data[num_features].columns):\n    ax = axes[i]\n    sns.histplot(train_data[num_features][col], ax=ax, color='seagreen', stat='frequency', bins=20)\n    ax.set_ylabel('Frequency')\n\nplt.suptitle('Histograms - Insurance Cross Selling Features', fontsize=20, y=1.0)\nplt.tight_layout()\nplt.savefig('Numerical feature analysis.svg')\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-09-01T06:23:06.781611Z","iopub.execute_input":"2024-09-01T06:23:06.781995Z","iopub.status.idle":"2024-09-01T06:23:15.481546Z","shell.execute_reply.started":"2024-09-01T06:23:06.781939Z","shell.execute_reply":"2024-09-01T06:23:15.480334Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"corr = train_data[num_features].corr()\ncmap = sns.light_palette(\"darkgreen\", as_cmap=True)\n\nplt.figure(figsize=(6,4))\nsns.heatmap(corr, annot=True, cmap=cmap, linewidths=0.2)\n\nplt.title('Mushrooms Dataset Feature Correlations', fontsize=16)\n\nplt.savefig('Insurance cross selling feature correlations.svg')\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-09-01T06:23:15.483038Z","iopub.execute_input":"2024-09-01T06:23:15.483377Z","iopub.status.idle":"2024-09-01T06:23:16.132983Z","shell.execute_reply.started":"2024-09-01T06:23:15.483349Z","shell.execute_reply":"2024-09-01T06:23:16.131390Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"---\n## Data Cleaning\n---","metadata":{}},{"cell_type":"code","source":"\ndef mark_unknown(df, all_known_values):\n    \n    for col in all_known_values:\n        if col in df.columns:            \n            known_values = all_known_values[col]\n            df[col] = df[col].apply(lambda x: x if x in known_values else 'unknown')\n\n\nknown_values = {\n    'cap-shape': ['x', 'f', 's', 'b', 'o', 'p', 'c', 'e', 'd', 't', 'n', 'w', 'y', 'a', 'u', 'g', 'l', 'k', 'r', 'z', 'm', 'i', 'h'],\n    'cap-surface': ['t', 's', 'y', 'h', 'g', 'd', 'k', 'e', 'i', 'w', 'l', 'f', 'n', 'p', 'o', 'a', 'x', 'm', 'r', 'u', 'c', 'b', 'z'],\n    'cap-color': ['n', 'y', 'w', 'g', 'e', 'o', 'p', 'r', 'u', 'b', 'k', 'l', 'f', 'd', 'a', 's', 'i', 't', 'x', 'h', 'c', 'z', 'm'],\n    'does-bruise-or-bleed': ['t', 'f'],\n    'gill-attachment': ['a', 'd', 'x', 'e', 's', 'p', 'f', 'c', 'u', 't', 'w', 'k', 'g', 'i', 'n', 'y', 'l', 'b', 'o', 'h', 'm', 'r', 'z'],\n    'gill-spacing': ['c', 'd', 'f', 'e', 's', 'a', 'b', 'x', 'p', 'w', 'y', 'g', 'm', 't', 'k', 'r'],\n    'gill-color': ['w', 'n', 'y', 'p', 'g', 'o', 'k', 'f', 'r', 'e', 'b', 'u', 'l', 'd', 's', 'x', 'c', 't', 'a', 'h', 'z', 'm', 'i'], \n    'stem-root': ['b', 's', 'r', 'c', 'f', 'y', 'g', 'p', 'u', 'd', 'e', 'l', 't', 'w', 'k', 'o', 'a', 'x', 'i', 'z', 'm', 'h', 'n'],\n    'stem-surface':  ['s', 'y', 'i', 't', 'g', 'k', 'h', 'f', 'd', 'w', 'e', 'r', 'u', 'n', 'x', 'o', 'c', 'p', 'l', 'a', 'b', 'm', 'z'],\n    'stem-color': ['w', 'n', 'y', 'g', 'o', 'e', 'u', 'p', 'k', 'r', 'l', 'b', 'f', 's', 'a', 'i', 't', 'x', 'd', 'h', 'c', 'm', 'z'],\n    'veil-type': ['u', 'w', 'e', 'k', 'y', 'p', 'g', 's', 'n', 'a', 'c', 'l', 'b', 'm'],\n    'veil-color': ['w', 'y', 'n', 'u', 'k', 'e', 'g', 'p', 't', 'd', 'r', 'h', 's', 'o', 'b', 'f', 'i', 'a', 'l', 'm', 'c',],\n    'has-ring': ['t', 'f'],\n    'ring-type': ['f', 'e', 'z', 'l', 'p', 'r', 'g', 'm', 't', 'd', 'x', 'w', 'y', 'n', 'u', 'c', 'a', 's', 'b', 'o', 'h', 'k', 'i'],\n    'spore-print-color': ['k', 'p', 'w', 'n', 'r', 'u', 'g', 'y', 'f', 's', 'e', 'o', 'b', 'a', 'd', 't', 'z', 'l', 'i', 'h', 'x'],\n    'habitat': ['d', 'g', 'l', 'm', 'h', 'w', 'p', 'u', 's', 't', 'n', 'e', 'r', 'k', 'c', 'a', 'b', 'y', 'f', 'x', 'o', 'i', 'z'],\n    'season': ['a', 'u', 'w', 's']\n\n}\n\n\nmark_unknown(train_data, known_values)\nmark_unknown(test_data, known_values)\n","metadata":{"execution":{"iopub.status.busy":"2024-09-01T06:23:16.135600Z","iopub.execute_input":"2024-09-01T06:23:16.136385Z","iopub.status.idle":"2024-09-01T06:23:48.695591Z","shell.execute_reply.started":"2024-09-01T06:23:16.136344Z","shell.execute_reply":"2024-09-01T06:23:48.694406Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train_data.head()","metadata":{"execution":{"iopub.status.busy":"2024-09-01T06:23:48.697006Z","iopub.execute_input":"2024-09-01T06:23:48.697351Z","iopub.status.idle":"2024-09-01T06:23:48.728671Z","shell.execute_reply.started":"2024-09-01T06:23:48.697321Z","shell.execute_reply":"2024-09-01T06:23:48.727407Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"test_data.head()","metadata":{"execution":{"iopub.status.busy":"2024-09-01T06:23:48.730066Z","iopub.execute_input":"2024-09-01T06:23:48.730385Z","iopub.status.idle":"2024-09-01T06:23:48.752627Z","shell.execute_reply.started":"2024-09-01T06:23:48.730358Z","shell.execute_reply":"2024-09-01T06:23:48.751177Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"for col in cat_features:\n    print(col)\n    print(dict(train_data[col].value_counts()))\n    print()\n","metadata":{"execution":{"iopub.status.busy":"2024-09-01T06:23:48.760723Z","iopub.execute_input":"2024-09-01T06:23:48.761117Z","iopub.status.idle":"2024-09-01T06:23:51.459103Z","shell.execute_reply.started":"2024-09-01T06:23:48.761086Z","shell.execute_reply":"2024-09-01T06:23:51.457680Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"for col in cat_features:\n    print(col)\n    print(dict(test_data[col].value_counts()))\n    print()\n    ","metadata":{"execution":{"iopub.status.busy":"2024-09-01T06:23:51.460361Z","iopub.execute_input":"2024-09-01T06:23:51.460646Z","iopub.status.idle":"2024-09-01T06:23:53.299037Z","shell.execute_reply.started":"2024-09-01T06:23:51.460622Z","shell.execute_reply":"2024-09-01T06:23:53.297634Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"missing_values = train_data[cat_features].isnull().sum().sort_values(ascending=False)\nmissing_values = missing_values[missing_values > 0]\nprint(missing_values)\n","metadata":{"execution":{"iopub.status.busy":"2024-09-01T06:23:53.300530Z","iopub.execute_input":"2024-09-01T06:23:53.301088Z","iopub.status.idle":"2024-09-01T06:23:56.963433Z","shell.execute_reply.started":"2024-09-01T06:23:53.301057Z","shell.execute_reply":"2024-09-01T06:23:56.962056Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"missing_values = test_data[num_features].isnull().sum().sort_values(ascending=False)\nmissing_values = missing_values[missing_values > 0]\nprint(missing_values)","metadata":{"execution":{"iopub.status.busy":"2024-09-01T06:23:56.964728Z","iopub.execute_input":"2024-09-01T06:23:56.965075Z","iopub.status.idle":"2024-09-01T06:23:57.002901Z","shell.execute_reply.started":"2024-09-01T06:23:56.965047Z","shell.execute_reply":"2024-09-01T06:23:57.001850Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"for col in cat_features:\n    train_data[col] = pd.Categorical(train_data[col])\n    test_data[col] = pd.Categorical(test_data[col])\n\n\ntrain_data['class'] = pd.Categorical(train_data['class'])\nprint(train_data.dtypes)\nprint(test_data.dtypes)\n","metadata":{"execution":{"iopub.status.busy":"2024-09-01T06:23:57.004602Z","iopub.execute_input":"2024-09-01T06:23:57.005051Z","iopub.status.idle":"2024-09-01T06:24:04.564159Z","shell.execute_reply.started":"2024-09-01T06:23:57.005013Z","shell.execute_reply":"2024-09-01T06:24:04.562843Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"num_cols = num_features.copy()\ncat_cols = cat_features.copy()\n\npreprocessor = ColumnTransformer(\n    transformers=[\n        ('numerical', Pipeline(steps=[\n            ('imputer', SimpleImputer(strategy='median')),\n            ('scaler', RobustScaler())            \n        ]), num_cols),\n\n        ('categorical', Pipeline(steps=[\n            ('encoder', OneHotEncoder(drop='first', handle_unknown='ignore'))\n        ]), cat_cols)\n\n    ],\n    remainder='passthrough'\n)\n\npreprocessor\n","metadata":{"execution":{"iopub.status.busy":"2024-09-01T06:24:04.565513Z","iopub.execute_input":"2024-09-01T06:24:04.565843Z","iopub.status.idle":"2024-09-01T06:24:04.599676Z","shell.execute_reply.started":"2024-09-01T06:24:04.565815Z","shell.execute_reply":"2024-09-01T06:24:04.598520Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"X = train_data.drop(columns=['class'])\ny = train_data['class']\n","metadata":{"execution":{"iopub.status.busy":"2024-09-01T06:24:04.601056Z","iopub.execute_input":"2024-09-01T06:24:04.601375Z","iopub.status.idle":"2024-09-01T06:24:04.683529Z","shell.execute_reply.started":"2024-09-01T06:24:04.601349Z","shell.execute_reply":"2024-09-01T06:24:04.682141Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"label_encoder = LabelEncoder()\ny = label_encoder.fit_transform(y)\n","metadata":{"execution":{"iopub.status.busy":"2024-09-01T06:24:04.684649Z","iopub.execute_input":"2024-09-01T06:24:04.684998Z","iopub.status.idle":"2024-09-01T06:24:05.365027Z","shell.execute_reply.started":"2024-09-01T06:24:04.684937Z","shell.execute_reply":"2024-09-01T06:24:05.363931Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=42)\n","metadata":{"execution":{"iopub.status.busy":"2024-09-01T06:24:05.366557Z","iopub.execute_input":"2024-09-01T06:24:05.366926Z","iopub.status.idle":"2024-09-01T06:24:06.314328Z","shell.execute_reply.started":"2024-09-01T06:24:05.366896Z","shell.execute_reply":"2024-09-01T06:24:06.313167Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# models = {\n#     'XGBoost': XGBClassifier(random_state=42),    #0.98215\n#     'LGBM': LGBMClassifier(random_state=42),\n#     'CatBoost': CatBoostClassifier(random_state=42)\n# }\n","metadata":{"execution":{"iopub.status.busy":"2024-09-01T06:24:06.315858Z","iopub.execute_input":"2024-09-01T06:24:06.316264Z","iopub.status.idle":"2024-09-01T06:24:06.321292Z","shell.execute_reply.started":"2024-09-01T06:24:06.316232Z","shell.execute_reply":"2024-09-01T06:24:06.319972Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# def train_models(X_train, X_val, y_train, y_val, models, preprocessor):\n#     results = {}\n#     pipelines = {}\n    \n#     for name, model in models.items():\n#         pipeline = make_pipeline(preprocessor, model)\n\n#         pipeline.fit(X_train, y_train)\n    \n#         y_pred = pipeline.predict(X_val)\n        \n#         score = matthews_corrcoef(y_val, y_pred)\n#         print(model, score)\n        \n#         results[name] = score\n#         pipelines[name] = pipeline\n                \n#     return pipelines, results\n\n\n# pipelines, scores = train_models(X_train, X_val, y_train, y_val, models, preprocessor)\n","metadata":{"execution":{"iopub.status.busy":"2024-09-01T06:24:06.322684Z","iopub.execute_input":"2024-09-01T06:24:06.323056Z","iopub.status.idle":"2024-09-01T06:24:06.332173Z","shell.execute_reply.started":"2024-09-01T06:24:06.323016Z","shell.execute_reply":"2024-09-01T06:24:06.331043Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# pipelines['XGBoost']","metadata":{"execution":{"iopub.status.busy":"2024-09-01T06:24:06.333301Z","iopub.execute_input":"2024-09-01T06:24:06.333629Z","iopub.status.idle":"2024-09-01T06:24:06.342696Z","shell.execute_reply.started":"2024-09-01T06:24:06.333597Z","shell.execute_reply":"2024-09-01T06:24:06.341402Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# pipelines['LGBM']","metadata":{"execution":{"iopub.status.busy":"2024-09-01T06:24:06.344338Z","iopub.execute_input":"2024-09-01T06:24:06.344715Z","iopub.status.idle":"2024-09-01T06:24:06.354243Z","shell.execute_reply.started":"2024-09-01T06:24:06.344682Z","shell.execute_reply":"2024-09-01T06:24:06.352841Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# pipelines['CatBoost']","metadata":{"execution":{"iopub.status.busy":"2024-09-01T06:24:06.355643Z","iopub.execute_input":"2024-09-01T06:24:06.356053Z","iopub.status.idle":"2024-09-01T06:24:06.365774Z","shell.execute_reply.started":"2024-09-01T06:24:06.356023Z","shell.execute_reply":"2024-09-01T06:24:06.364494Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# scores","metadata":{"execution":{"iopub.status.busy":"2024-09-01T06:24:06.367512Z","iopub.execute_input":"2024-09-01T06:24:06.367891Z","iopub.status.idle":"2024-09-01T06:24:06.375831Z","shell.execute_reply.started":"2024-09-01T06:24:06.367854Z","shell.execute_reply":"2024-09-01T06:24:06.374629Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# def objective(trial, X_train, X_val, y_train, y_val, preprocessor):\n    \n#     param = {\n#         'objective': 'Logloss',\n#         'eval_metric': 'MCC',\n#         'max_depth': trial.suggest_int('max_depth', 3, 15),\n#         'subsample': trial.suggest_uniform('subsample', 0.5, 1.0),\n#         'colsample_bylevel': trial.suggest_uniform('colsample_bylevel', 0.5, 1.0),\n#         'min_child_samples': trial.suggest_int('min_child_samples', 1, 10),\n#         'learning_rate': trial.suggest_loguniform('learning_rate', 1e-4, 0.1),\n#         'n_estimators': 1000,\n#         'random_state': 42,\n#         'thread_count': -1\n#     }\n    \n#     model = CatBoostClassifier(**param)\n#     pipeline = make_pipeline(preprocessor, model)\n#     pipeline.fit(X_train, y_train)\n    \n#     y_pred = pipeline.predict(X_val)\n#     score = matthews_corrcoef(y_val, y_pred)\n    \n#     return score\n\n\n# def tune_catboost(X_train, X_val, y_train, y_val, preprocessor, n_trials=20):\n#     study = optuna.create_study(direction='maximize')\n#     study.optimize(lambda trial: objective(trial, X_train, X_val, y_train, y_val, preprocessor), n_trials=n_trials)\n    \n#     print(f'Best trial: {study.best_trial.params}')\n\n#     best_model_params = study.best_trial.params\n# #     best_model = CatBoostClassifier(**best_model_params)\n# #     best_model_pipeline = make_pipeline(preprocessor, best_model)\n# #     best_model_pipeline.fit(X_train, y_train)\n\n#     return best_model_params\n\n\n# best_model_params = tune_catboost(X_train, X_val, y_train, y_val, preprocessor)\n# best_model_params","metadata":{"execution":{"iopub.status.busy":"2024-09-01T06:24:06.377277Z","iopub.execute_input":"2024-09-01T06:24:06.377686Z","iopub.status.idle":"2024-09-01T06:24:06.388771Z","shell.execute_reply.started":"2024-09-01T06:24:06.377602Z","shell.execute_reply":"2024-09-01T06:24:06.387194Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"best_model_params = {'max_depth': 15,\n 'subsample': 0.9984895315746252,\n 'colsample_bylevel': 0.5117401112492885,\n 'min_child_samples': 5,\n 'learning_rate': 0.09610175509804439\n}\n\nbest_model = CatBoostClassifier(**best_model_params)\n\nbest_catboost_model = make_pipeline(preprocessor, best_model)\nbest_catboost_model.fit(X_train, y_train)\n","metadata":{"execution":{"iopub.status.busy":"2024-09-01T06:24:06.390578Z","iopub.execute_input":"2024-09-01T06:24:06.391116Z","iopub.status.idle":"2024-09-01T07:02:02.087775Z","shell.execute_reply.started":"2024-09-01T06:24:06.391073Z","shell.execute_reply":"2024-09-01T07:02:02.086392Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import joblib\njoblib.dump(best_catboost_model, 'best_catboost_model.pkl')\n","metadata":{"execution":{"iopub.status.busy":"2024-09-01T07:02:02.089364Z","iopub.execute_input":"2024-09-01T07:02:02.089759Z","iopub.status.idle":"2024-09-01T07:02:04.988678Z","shell.execute_reply.started":"2024-09-01T07:02:02.089729Z","shell.execute_reply":"2024-09-01T07:02:04.987414Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"best_model = joblib.load('best_catboost_model.pkl')\ntest_predictions = best_model.predict(test_data)","metadata":{"execution":{"iopub.status.busy":"2024-09-01T07:02:04.989994Z","iopub.execute_input":"2024-09-01T07:02:04.990311Z","iopub.status.idle":"2024-09-01T07:02:32.949468Z","shell.execute_reply.started":"2024-09-01T07:02:04.990284Z","shell.execute_reply":"2024-09-01T07:02:32.948057Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"test_predictions","metadata":{"execution":{"iopub.status.busy":"2024-09-01T07:02:32.951460Z","iopub.execute_input":"2024-09-01T07:02:32.952796Z","iopub.status.idle":"2024-09-01T07:02:32.960540Z","shell.execute_reply.started":"2024-09-01T07:02:32.952735Z","shell.execute_reply":"2024-09-01T07:02:32.959468Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"submission = pd.read_csv('/kaggle/input/playground-series-s4e8/sample_submission.csv')\nsubmission['class'] = test_predictions\nsubmission['class'] = label_encoder.inverse_transform(submission['class'])\n\nsubmission.to_csv('submission.csv', index=False)\n\nsubmission.head()","metadata":{"execution":{"iopub.status.busy":"2024-09-01T07:02:32.961758Z","iopub.execute_input":"2024-09-01T07:02:32.962110Z","iopub.status.idle":"2024-09-01T07:02:35.262879Z","shell.execute_reply.started":"2024-09-01T07:02:32.962080Z","shell.execute_reply":"2024-09-01T07:02:35.261628Z"},"trusted":true},"execution_count":null,"outputs":[]}]}